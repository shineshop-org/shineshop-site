const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Hằng số bảo mật - phải giống với những gì có trong app/lib/auth.ts
const ENCRYPTION_KEY = 'encKey-b9e25a8d-3c74-4f5a-9e12-f3b0e2dc4a19';
const ACCESS_COOKIE_NAME = 'shineshop_admin_access';
const COOKIE_NAME = 'shineshop_admin_auth';
const COOKIE_MAX_AGE = 24 * 60 * 60; // 24 giờ thay vì 30 ngày

// Output file paths
const NETSCAPE_FILE = path.join(__dirname, 'admin_cookies_netscape.txt');

// Hàm tạo token ngẫu nhiên
function getRandomString(length) {
  return crypto.randomBytes(Math.ceil(length / 2))
    .toString('hex')
    .slice(0, length);
}

// Hàm mã hóa AES tương tự CryptoJS.AES.encrypt
function aesEncrypt(data, key) {
  const iv = crypto.randomBytes(16);
  const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key.slice(0, 32)), iv);
  let encrypted = cipher.update(data);
  encrypted = Buffer.concat([encrypted, cipher.final()]);
  return iv.toString('hex') + ':' + encrypted.toString('hex');
}

// Hàm tạo hmac SHA256 tương tự CryptoJS.HmacSHA256
function hmacSha256(data, key) {
  return crypto
    .createHmac('sha256', key)
    .update(data)
    .digest('hex');
}

// Tạo access token
function generateAccessToken() {
  const timestamp = new Date().getTime();
  const uniqueId = getRandomString(20);
  
  const payload = {
    accessKey: true,
    timestamp,
    uniqueId,
    signature: hmacSha256(`${timestamp}:${uniqueId}`, ENCRYPTION_KEY)
  };
  
  return aesEncrypt(JSON.stringify(payload), ENCRYPTION_KEY);
}

// Tạo special token
function generateSpecialToken() {
  const timestamp = new Date().getTime();
  const payload = {
    admin: true,
    timestamp,
    special: 'shineshop-secure'
  };
  
  return aesEncrypt(JSON.stringify(payload), ENCRYPTION_KEY);
}

// Tạo file cookie Netscape
function generateCookieFile(domain, secure = false) {
  const accessToken = generateAccessToken();
  const specialToken = generateSpecialToken();
  const expiryDate = Math.floor(Date.now()/1000) + COOKIE_MAX_AGE;
  
  return `# Netscape HTTP Cookie File
# https://curl.se/docs/http-cookies.html
# This file was generated by shineshop-admin. Edit at your own risk.
# Generated: ${new Date().toLocaleString()}
# Expires: ${new Date(expiryDate * 1000).toLocaleString()} (24 giờ sau khi tạo)
# *** SECURITY WARNING: Cookies contain authentication information for admin access! ***

${domain}\tTRUE\t/\t${secure ? 'TRUE' : 'FALSE'}\t${expiryDate}\t${ACCESS_COOKIE_NAME}\t${accessToken}
${domain}\tTRUE\t/\t${secure ? 'TRUE' : 'FALSE'}\t${expiryDate}\t${COOKIE_NAME}\t${specialToken}
`;
}

// Tự động phát hiện domain từ tên host máy tính
function getDefaultDomain() {
  try {
    return require('os').hostname().toLowerCase();
  } catch (e) {
    return 'localhost';
  }
}

// Hàm nhắc người dùng
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('\n=== TẠO FILE COOKIE ADMIN (Thời hạn: 24 giờ) ===\n');

rl.question(`Nhập domain của trang web (mặc định: ${getDefaultDomain()}): `, (domainInput) => {
  const domain = domainInput.trim() || getDefaultDomain();
  
  rl.question('Sử dụng secure cookie? (y/n, mặc định là n): ', (secureInput) => {
    const secure = secureInput.toLowerCase() === 'y';
    
    const cookieFileContent = generateCookieFile(domain, secure);
    fs.writeFileSync(NETSCAPE_FILE, cookieFileContent);
    
    console.log(`\nĐã tạo file cookie thành công tại: ${NETSCAPE_FILE}`);
    console.log(`\nThông tin quan trọng:`);
    console.log(`- Thời hạn cookie: 24 giờ kể từ khi tạo`);
    console.log(`- Domain: ${domain}`);
    console.log(`- Secure: ${secure ? 'Có' : 'Không'}`);
    
    console.log('\nHướng dẫn import cookie:');
    console.log('1. Trong Chrome: Cài tiện ích EditThisCookie, chọn Import và chọn file');
    console.log('2. Trong Firefox: Sử dụng tiện ích "Cookie Quick Manager" để import');
    console.log('3. Trong Edge: Cài tiện ích EditThisCookie, chọn Import và chọn file');
    console.log('\nSau khi import cookie, hãy làm mới trang và thử truy cập /admin');
    console.log('\nLƯU Ý: Cookie sẽ hết hạn sau 24 giờ. Chạy lại script này để tạo cookie mới.');
    
    rl.close();
  });
}); 